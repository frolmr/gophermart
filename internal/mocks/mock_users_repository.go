// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/handlers/users_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/api/handlers/users_handler.go -destination=internal/mocks/mock_user_repo.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/frolmr/gophermart/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
	isgomock struct{}
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// CreateAndReturnUser mocks base method.
func (m *MockUsersRepository) CreateAndReturnUser(login, password string) (*domain.DBUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndReturnUser", login, password)
	ret0, _ := ret[0].(*domain.DBUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndReturnUser indicates an expected call of CreateAndReturnUser.
func (mr *MockUsersRepositoryMockRecorder) CreateAndReturnUser(login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndReturnUser", reflect.TypeOf((*MockUsersRepository)(nil).CreateAndReturnUser), login, password)
}

// GetUserByLogin mocks base method.
func (m *MockUsersRepository) GetUserByLogin(login string) (*domain.DBUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", login)
	ret0, _ := ret[0].(*domain.DBUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUsersRepositoryMockRecorder) GetUserByLogin(login any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUsersRepository)(nil).GetUserByLogin), login)
}
