// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/handlers/orders_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/api/handlers/orders_handler.go -destination=internal/mocks/mock_orders_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/frolmr/gophermart/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockOrdersRepository is a mock of OrdersRepository interface.
type MockOrdersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersRepositoryMockRecorder
	isgomock struct{}
}

// MockOrdersRepositoryMockRecorder is the mock recorder for MockOrdersRepository.
type MockOrdersRepositoryMockRecorder struct {
	mock *MockOrdersRepository
}

// NewMockOrdersRepository creates a new mock instance.
func NewMockOrdersRepository(ctrl *gomock.Controller) *MockOrdersRepository {
	mock := &MockOrdersRepository{ctrl: ctrl}
	mock.recorder = &MockOrdersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersRepository) EXPECT() *MockOrdersRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrdersRepository) CreateOrder(number string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", number, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrdersRepositoryMockRecorder) CreateOrder(number, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrdersRepository)(nil).CreateOrder), number, userID)
}

// FindOrderByNumber mocks base method.
func (m *MockOrdersRepository) FindOrderByNumber(number string) (*domain.DBOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByNumber", number)
	ret0, _ := ret[0].(*domain.DBOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByNumber indicates an expected call of FindOrderByNumber.
func (mr *MockOrdersRepositoryMockRecorder) FindOrderByNumber(number any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByNumber", reflect.TypeOf((*MockOrdersRepository)(nil).FindOrderByNumber), number)
}

// GetAllUserOrders mocks base method.
func (m *MockOrdersRepository) GetAllUserOrders(userID int64) ([]*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserOrders", userID)
	ret0, _ := ret[0].([]*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserOrders indicates an expected call of GetAllUserOrders.
func (mr *MockOrdersRepositoryMockRecorder) GetAllUserOrders(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserOrders", reflect.TypeOf((*MockOrdersRepository)(nil).GetAllUserOrders), userID)
}

// GetAllUnprocessedOrders mocks base method.
func (m *MockOrdersRepository) GetAllUnprocessedOrders() ([]*domain.DBOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUnprocessedOrders")
	ret0, _ := ret[0].([]*domain.DBOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUnprocessedOrders indicates an expected call of GetAllUnprocessedOrders.
func (mr *MockOrdersRepositoryMockRecorder) GetAllUnprocessedOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUnprocessedOrders", reflect.TypeOf((*MockOrdersRepository)(nil).GetAllUnprocessedOrders))
}

// UpdateOrderAccrualStatus mocks base method.
func (m *MockOrdersRepository) UpdateOrderAccrualStatus(id int64, status string, accrual *float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderAccrualStatus", id, status, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderAccrualStatus indicates an expected call of UpdateOrderAccrualStatus.
func (mr *MockOrdersRepositoryMockRecorder) UpdateOrderAccrualStatus(id, status, accrual any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderAccrualStatus", reflect.TypeOf((*MockOrdersRepository)(nil).UpdateOrderAccrualStatus), id, status, accrual)
}
