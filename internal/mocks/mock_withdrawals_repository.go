// Code generated by MockGen. DO NOT EDIT.
// Source: internal/api/handlers/withdrawals_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/api/handlers/withdrawals_handler.go -destination=internal/mocks/mock_withdrawals_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/frolmr/gophermart/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockWithdrawalRepository is a mock of WithdrawalRepository interface.
type MockWithdrawalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalRepositoryMockRecorder
	isgomock struct{}
}

// MockWithdrawalRepositoryMockRecorder is the mock recorder for MockWithdrawalRepository.
type MockWithdrawalRepositoryMockRecorder struct {
	mock *MockWithdrawalRepository
}

// NewMockWithdrawalRepository creates a new mock instance.
func NewMockWithdrawalRepository(ctrl *gomock.Controller) *MockWithdrawalRepository {
	mock := &MockWithdrawalRepository{ctrl: ctrl}
	mock.recorder = &MockWithdrawalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalRepository) EXPECT() *MockWithdrawalRepositoryMockRecorder {
	return m.recorder
}

// CreateWithdrawal mocks base method.
func (m *MockWithdrawalRepository) CreateWithdrawal(orderNumber string, sum float64, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawal", orderNumber, sum, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdrawal indicates an expected call of CreateWithdrawal.
func (mr *MockWithdrawalRepositoryMockRecorder) CreateWithdrawal(orderNumber, sum, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawal", reflect.TypeOf((*MockWithdrawalRepository)(nil).CreateWithdrawal), orderNumber, sum, userID)
}

// GetAllUserWithdrawals mocks base method.
func (m *MockWithdrawalRepository) GetAllUserWithdrawals(userID int64) ([]*domain.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserWithdrawals", userID)
	ret0, _ := ret[0].([]*domain.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserWithdrawals indicates an expected call of GetAllUserWithdrawals.
func (mr *MockWithdrawalRepositoryMockRecorder) GetAllUserWithdrawals(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserWithdrawals", reflect.TypeOf((*MockWithdrawalRepository)(nil).GetAllUserWithdrawals), userID)
}

// GetUserCurrentBalance mocks base method.
func (m *MockWithdrawalRepository) GetUserCurrentBalance(userID int64) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCurrentBalance", userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCurrentBalance indicates an expected call of GetUserCurrentBalance.
func (mr *MockWithdrawalRepositoryMockRecorder) GetUserCurrentBalance(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCurrentBalance", reflect.TypeOf((*MockWithdrawalRepository)(nil).GetUserCurrentBalance), userID)
}
